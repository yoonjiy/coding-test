package bfs_or_dfs;
class Pro_level3_92345 {
    int[] dr = {0, 0, 1, -1};
    int[] dc = {1, -1, 0, 0};
    int n, m;
    public int solution(int[][] board, int[] aloc, int[] bloc) {
        int answer = -1;
        //양 플레이어가 최적의 플레이를 했을 때, 두 캐릭터가 움직인 횟수의 합을 return 
        n = board.length;
        m = board[0].length;
        answer = dfs(aloc[0], aloc[1], bloc[0], bloc[1], board);
        return answer;
    }
    
    public int dfs(int fr, int fc, int sr, int sc, int[][] board){
        if(board[fr][fc]==0){
            return 0; //발판이 없으면 패배
        }
        
        int ret = 0;
        for(int i=0; i<4; i++){
            int nr = fr + dr[i];
            int nc = fc + dc[i];
            
            if(nr<0 || nc<0 || nr>=n || nc>=m) continue;
            if(board[nr][nc]==0) continue;
            
            board[fr][fc] = 0;
            
            int count = dfs(sr, sc, nr, nc, board)+1; //다음 플레이어 턴
            board[fr][fc] = 1;
            
            if(ret%2==0 && count%2==1){
                ret = count; //이길 수 있다면 이기는 케이스로 갱신
            }
            //지는 플레이어인 경우, 최대한 늦게 지도록 플레이
            else if(ret%2==0 && count%2==0){ 
                ret = Math.max(ret, count);
            }
            else if(ret%2==1 && count%2==1){//이기는 플레이어인 경우, 최대한 빨리 승리하도록 플레이
                ret = Math.min(ret, count);
            }
        }
        
        return ret;
    }
    

}